//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/InputSystem/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerRed"",
            ""id"": ""1565ec97-0459-4099-8aa2-c3504e5ef551"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""00c6e5be-7f22-42aa-b11b-854554e8b774"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""096dcfd7-de71-4b69-8888-ca6eec81324b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b27b56fe-d946-455f-9404-e9c852413d15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ora"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c7eb226e-526e-4f58-b586-132a643a7a99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""81688522-7d87-4420-944f-1a5c937777b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03385bba-724d-445e-878b-b4a21b80106e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""554bed26-ef0b-4a38-92da-ea7089d4d2a4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""35d3d2bb-bffa-4b34-87ed-5e7bc0899488"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""032a4f6e-8c8c-4f1d-a96d-ea9ac22537f9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""edfea5d2-2860-416e-9bc9-a2f97f37885b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca4d77f6-5b47-48ca-a3d0-3999c7d3abfa"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""248b76bb-208a-4dfa-8472-821dabc4b12c"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ora"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerBlue"",
            ""id"": ""28a965b7-a3a3-4ca2-9901-3b3bf9b523c4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0892a245-421f-46e0-b024-a75b2bc42fe7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28faeabf-0ec1-4a32-be36-232f29289a42"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerRed
        m_PlayerRed = asset.FindActionMap("PlayerRed", throwIfNotFound: true);
        m_PlayerRed_Move = m_PlayerRed.FindAction("Move", throwIfNotFound: true);
        m_PlayerRed_Attack = m_PlayerRed.FindAction("Attack", throwIfNotFound: true);
        m_PlayerRed_Jump = m_PlayerRed.FindAction("Jump", throwIfNotFound: true);
        m_PlayerRed_Ora = m_PlayerRed.FindAction("Ora", throwIfNotFound: true);
        // PlayerBlue
        m_PlayerBlue = asset.FindActionMap("PlayerBlue", throwIfNotFound: true);
        m_PlayerBlue_Newaction = m_PlayerBlue.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerRed
    private readonly InputActionMap m_PlayerRed;
    private IPlayerRedActions m_PlayerRedActionsCallbackInterface;
    private readonly InputAction m_PlayerRed_Move;
    private readonly InputAction m_PlayerRed_Attack;
    private readonly InputAction m_PlayerRed_Jump;
    private readonly InputAction m_PlayerRed_Ora;
    public struct PlayerRedActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerRedActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerRed_Move;
        public InputAction @Attack => m_Wrapper.m_PlayerRed_Attack;
        public InputAction @Jump => m_Wrapper.m_PlayerRed_Jump;
        public InputAction @Ora => m_Wrapper.m_PlayerRed_Ora;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRedActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerRedActions instance)
        {
            if (m_Wrapper.m_PlayerRedActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnAttack;
                @Jump.started -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnJump;
                @Ora.started -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnOra;
                @Ora.performed -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnOra;
                @Ora.canceled -= m_Wrapper.m_PlayerRedActionsCallbackInterface.OnOra;
            }
            m_Wrapper.m_PlayerRedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Ora.started += instance.OnOra;
                @Ora.performed += instance.OnOra;
                @Ora.canceled += instance.OnOra;
            }
        }
    }
    public PlayerRedActions @PlayerRed => new PlayerRedActions(this);

    // PlayerBlue
    private readonly InputActionMap m_PlayerBlue;
    private IPlayerBlueActions m_PlayerBlueActionsCallbackInterface;
    private readonly InputAction m_PlayerBlue_Newaction;
    public struct PlayerBlueActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerBlueActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerBlue_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBlue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBlueActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBlueActions instance)
        {
            if (m_Wrapper.m_PlayerBlueActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerBlueActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerBlueActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerBlueActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerBlueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerBlueActions @PlayerBlue => new PlayerBlueActions(this);
    public interface IPlayerRedActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnOra(InputAction.CallbackContext context);
    }
    public interface IPlayerBlueActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
